{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"LostEncrypt/","title":"LostEncrypt","text":""},{"location":"LostEncrypt/#LostEncryptor.LostEncrypt","title":"<code>LostEncrypt</code>","text":"<p>             Bases: <code>AsciiEncrypt</code>, <code>ToHASHs</code>, <code>Codes</code></p> <p>LostEncrypt herda propriedades e func\u00f5es de todas as outras classes.</p> Source code in <code>LostEncryptor\\__init__.py</code> <pre><code>class LostEncrypt(AsciiEncrypt,ToHASHs,Codes):\n    \"\"\"LostEncrypt herda propriedades e func\u00f5es de todas as outras classes.\n    \"\"\"\n\n    def __init__(self, data: str) -&gt; None:\n\n        \"\"\"Fun\u00e7\u00e3o inicializadora da classe LostEncrypt\n\n        Args:\n            data (str): dados que v\u00e3o ser criptografados\n        \"\"\"\n\n        AsciiEncrypt.__init__(self,data)\n        Codes.__init__(self,data)\n        ToHASHs.__init__(self,data)\n        self.data = str(data)\n        self.encodingTypes = ['ascii','utf8']\n\n    def toBytes(self,encoding: Literal[\"ascii\", \"utf8\"]):\n\n        \"\"\"Fun\u00e7\u00e3o que transforma o `self.data` para bytes.\n\n        Args:\n            encoding (Literal[\"ascii\", \"utf8\"]): Tipos de codifica\u00e7\u00e3o aceitas\n\n        Raises:\n            ValueError: [description]\n\n        Returns:\n            [bytes]: O `self.data` codificado para bytes\n\n        \"\"\"\n\n        if encoding in self.encodingTypes:\n            self.data = self.data.encode(encoding=encoding)\n            return self.data\n        raise ValueError(f\"{encoding} not is one type of possible\")\n</code></pre>"},{"location":"LostEncrypt/#LostEncryptor.LostEncrypt.__init__","title":"<code>__init__(data)</code>","text":"<p>Fun\u00e7\u00e3o inicializadora da classe LostEncrypt</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>dados que v\u00e3o ser criptografados</p> required Source code in <code>LostEncryptor\\__init__.py</code> <pre><code>def __init__(self, data: str) -&gt; None:\n\n    \"\"\"Fun\u00e7\u00e3o inicializadora da classe LostEncrypt\n\n    Args:\n        data (str): dados que v\u00e3o ser criptografados\n    \"\"\"\n\n    AsciiEncrypt.__init__(self,data)\n    Codes.__init__(self,data)\n    ToHASHs.__init__(self,data)\n    self.data = str(data)\n    self.encodingTypes = ['ascii','utf8']\n</code></pre>"},{"location":"LostEncrypt/#LostEncryptor.LostEncrypt.toBytes","title":"<code>toBytes(encoding)</code>","text":"<p>Fun\u00e7\u00e3o que transforma o <code>self.data</code> para bytes.</p> <p>Parameters:</p> Name Type Description Default <code>encoding</code> <code>Literal['ascii', 'utf8']</code> <p>Tipos de codifica\u00e7\u00e3o aceitas</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>[description]</p> <p>Returns:</p> Type Description <p>[bytes]: O <code>self.data</code> codificado para bytes</p> Source code in <code>LostEncryptor\\__init__.py</code> <pre><code>def toBytes(self,encoding: Literal[\"ascii\", \"utf8\"]):\n\n    \"\"\"Fun\u00e7\u00e3o que transforma o `self.data` para bytes.\n\n    Args:\n        encoding (Literal[\"ascii\", \"utf8\"]): Tipos de codifica\u00e7\u00e3o aceitas\n\n    Raises:\n        ValueError: [description]\n\n    Returns:\n        [bytes]: O `self.data` codificado para bytes\n\n    \"\"\"\n\n    if encoding in self.encodingTypes:\n        self.data = self.data.encode(encoding=encoding)\n        return self.data\n    raise ValueError(f\"{encoding} not is one type of possible\")\n</code></pre>"}]}